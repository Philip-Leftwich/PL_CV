authors_full = tibble(authors = character())
pubs_df
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs_df$pubid[i])
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
authors_full
install.pakacges("bib2df")
install.packages("bib2df")
bib2df::df2bib(pubs_df)
pubs_df <- pubs_df %>%
mutate(author=authors_full$authors)
pubs_df
`%ni%` = Negate(`%in%`)
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ&h") %>%
distinct(title, .keep_all = TRUE) %>%
transmute(bibtype = "Article", author = as.character(author),
title = as.character(title),
journaltitle = as.character(journal), year, key = row_number(),
number = as.character(number), cites = as.numeric(cites),
pubid = as.character(pubid)
)
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid = pubs_df$pubid[i])
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
pubs_df <- pubs_df %>%
mutate(author=authors_full$authors) %>%
filter(journal %ni% c("University of East Anglia", "OUP (Oxford)"))
bib2df::df2bib(pubs_df, "journal.bibtex")
getwd()
bib2df::df2bib(pubs_df)
pubs_df
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ&h")
pubs_df
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ&h")
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid = pubs_df$pubid[i])
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
pubs_df <- pubs_df %>%
mutate(author=authors_full$authors) %>%
filter(journal %ni% c("University of East Anglia", "OUP (Oxford)"))
pubs_df
bib2df::df2bib(pubs_df)
pubs_df
pubs_df %>% as.tibble()
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ&h") %>%
distinct(title, .keep_all = TRUE) %>%
transmute(bibtype = "Article", author = as.character(author),
title = as.character(title),
journaltitle = as.character(journal), year, key = row_number(),
number = as.character(number), cites = as.numeric(cites),
pubid = as.character(pubid)
)
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid = pubs_df$pubid[i])
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
pubs_df <- pubs_df %>%
mutate(author=authors_full$authors) %>%
filter(journal %ni% c("University of East Anglia", "OUP (Oxford)")) %>%
as_tibble()
bib2df::df2bib(pubs_df)
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ&h") %>%
distinct(title, .keep_all = TRUE) %>%
transmute(bibtype = "Article", author = as.character(author),
title = as.character(title),
journaltitle = as.character(journal), year, key = row_number(),
number = as.character(number), cites = as.numeric(cites),
pubid = as.character(pubid)
)
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid = pubs_df$pubid[i])
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
pubs_df <- pubs_df %>%
mutate(author=authors_full$authors) %>%
filter(journal %ni% c("University of East Anglia", "OUP (Oxford)")) %>%
as_
pubs_df <- pubs_df %>%
mutate(author=authors_full$authors) %>%
filter(journal %ni% c("University of East Anglia", "OUP (Oxford)"))
pubs_df
pubs_df <- pubs_df %>%
mutate(author=authors_full$authors) %>%
filter(journaltitle %ni% c("University of East Anglia", "OUP (Oxford)"))
pubs_df
authors_full
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid = pubs_df$pubid[i])
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
authors_full
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
pubs_df
authors_full
`%ni%` = Negate(`%in%`)
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ&h") %>%
distinct(title, .keep_all = TRUE) %>%
transmute(bibtype = "Article", author = as.character(author),
title = as.character(title),
journaltitle = as.character(journal), year, key = row_number(),
number = as.character(number), cites = as.numeric(cites),
pubid = as.character(pubid)
)
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
pubs_df <- pubs_df %>%
mutate(author=authors_full$authors) %>%
filter(journaltitle %ni% c("University of East Anglia", "OUP (Oxford)"))
pubs_df
authors_full
authors_full = tibble(authors = character())
authors_full
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ&h") %>%
distinct(title, .keep_all = TRUE) %>%
transmute(bibtype = "Article", author = as.character(author),
title = as.character(title),
journaltitle = as.character(journal), year, key = row_number(),
number = as.character(number), cites = as.numeric(cites),
pubid = as.character(pubid)
)
pubs_df
scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid ="KlAtU1dfN6UC")
scholar::get_complete_authors("5-qU7lkAAAAJ&h")
scholar::get_complete_authors("5-qU7lkAAAAJ&h", pubid=KlAtU1dfN6UC)
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
authors_full
pubs_df
authors_full
view(authors_full)
authors_full[6]
authors_full[,6]
authors_full[6,]
ezpickr::pick("data/grant.xlsx") %>%
tidyr::fill(-why) %>%
vitae::detailed_entries(what, when, with, where, why)
getwd()
ezpickr::pick("data/grant.xlsx") %>%
tidyr::fill(-why) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/grant.xlsx") %>%
tidyr::fill(-why) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/grant.xlsx")
getwd()
ezpickr::pick("data/education.xlsx")
qual <- do.call("rbind",
rorcid::orcid_qualifications("0000-0001-9500-6592")$`0000-0001-9500-6592`$`affiliation-group`$summaries
)
qual <- qual %>%
detailed_entries(
with = `qualification-summary.role-title`,
when = `qualification-summary.start-date.year.value`,
what = `qualification-summary.organization.name`,
where = `qualification-summary.organization.address.city`
)
library(knitr)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(vitae)
library(tidyverse)
library(ezpickr)
ezpickr::pick("data/grant.xlsx") %>%
tidyr::fill(-why) %>%
vitae::detailed_entries(what, when, with, where, why)
qual <- do.call("rbind",
rorcid::orcid_qualifications("0000-0001-9500-6592")$`0000-0001-9500-6592`$`affiliation-group`$summaries
)
qual <- qual %>%
detailed_entries(
with = `qualification-summary.role-title`,
when = `qualification-summary.start-date.year.value`,
what = `qualification-summary.organization.name`,
where = `qualification-summary.organization.address.city`
)
qual
ezpickr::pick("data/grant.csv") %>%
tidyr::fill(-why) %>%
vitae::detailed_entries(what, when, with, where, why)
qual <- do.call("rbind",
rorcid::orcid_qualifications("0000-0001-9500-6592")$`0000-0001-9500-6592`$`affiliation-group`$summaries
)
qual <- qual %>%
detailed_entries(
with = `qualification-summary.role-title`,
when = `qualification-summary.start-date.year.value`,
what = `qualification-summary.organization.name`,
where = `qualification-summary.organization.address.city`
)
qual
ezpickr::pick("data/grant.csv") %>%
tidyr::fill(-why) %>%
arrange(desc(year)) %>%
vitae::detailed_entries(what, when, with, where, why)
library(tidyverse)
ezpickr::pick("data/grant.csv") %>%
tidyr::fill(-why) %>%
arrange(desc(year)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/grant.csv") %>%
tidyr::fill(-why) %>%
arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/grant.xlsx") %>%
tidyr::fill(-why) %>%
arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/grant.xlsx") %>%
tidyr::fill(-why) %>%
arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/grant.xlsx") %>%
tidyr::fill(-why) %>%
arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/grant.csv") %>%
tidyr::fill(-why) %>%
arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
library(tidyverse)
`%ni%` = Negate(`%in%`)
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ") %>%
distinct(title, .keep_all = TRUE) %>%
transmute(bibtype = "Article", author = as.character(author),
title = as.character(title),
journaltitle = as.character(journal), year, key = row_number(),
number = as.character(number), cites = as.numeric(cites),
pubid = as.character(pubid)
)
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
RefManageR::ReadGS(scholar.id="5-qU7lkAAAAJ", check.entries=FALSE) %>%
as_tibble() %>%
mutate(author=authors_full$authors) -> pubs
pubs %>%
filter(institution %ni% c("University of East Anglia", "OUP (Oxford)", "bioRxiv")) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib(file="bib/journal.bib", .Encoding="UTF-8")
pubs %>%
filter(institution =="OUP (Oxford)") %>%
mutate(bibtype="Book") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib(file="bib/proceedings.bib", .Encoding="UTF-8")
pubs %>%
filter(institution =="bioRxiv") %>%
mutate(journal=institution) %>%
mutate(bibtype="Article") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib(file="bib/working_paper.bib", .Encoding="UTF-8")
install.packages("bibtex")
library(tidyverse)
`%ni%` = Negate(`%in%`)
pubs_df <- scholar::get_publications("5-qU7lkAAAAJ") %>%
distinct(title, .keep_all = TRUE) %>%
transmute(bibtype = "Article", author = as.character(author),
title = as.character(title),
journaltitle = as.character(journal), year, key = row_number(),
number = as.character(number), cites = as.numeric(cites),
pubid = as.character(pubid)
)
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
RefManageR::ReadGS(scholar.id="5-qU7lkAAAAJ", check.entries=FALSE) %>%
as_tibble() %>%
mutate(author=authors_full$authors) -> pubs
pubs %>%
filter(institution %ni% c("University of East Anglia", "OUP (Oxford)", "bioRxiv")) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib(file="bib/journal.bib", .Encoding="UTF-8")
pubs %>%
filter(institution =="OUP (Oxford)") %>%
mutate(bibtype="Book") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib(file="bib/proceedings.bib", .Encoding="UTF-8")
pubs %>%
filter(institution =="bioRxiv") %>%
mutate(journal=institution) %>%
mutate(bibtype="Article") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
bibtext::write.bib(file="bib/working_paper.bib", .Encoding="UTF-8")
pubs %>%
filter(institution %ni% c("University of East Anglia", "OUP (Oxford)", "bioRxiv")) %>%
RefManageR::as.BibEntry() %>%
bibtex::write.bib(file="bib/journal.bib", encoding="UTF-8")
pubs %>%
filter(institution =="OUP (Oxford)") %>%
mutate(bibtype="Book") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
bibtex::write.bib(file="bib/proceedings.bib", encoding="UTF-8")
pubs %>%
filter(institution =="bioRxiv") %>%
mutate(journal=institution) %>%
mutate(bibtype="Article") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib(file="bib/working_paperbib", .Encoding="UTF-8")
pubs %>%
filter(institution %ni% c("University of East Anglia", "OUP (Oxford)", "bioRxiv")) %>%
RefManageR::as.BibEntry() %>%
bibtex::write.bib(file="bib/journal.bib", encoding="UTF-8")
pubs %>%
filter(institution =="OUP (Oxford)") %>%
mutate(bibtype="Book") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
bibtex::write.bib(file="bib/proceedings.bib", encoding="UTF-8")
pubs %>%
filter(institution =="bioRxiv") %>%
mutate(journal=institution) %>%
mutate(bibtype="Article") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib(file="bib/working_paper.bib", .Encoding="UTF-8")
ezpickr::pick("data/teaching.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where)
??detailed_entries
ezpickr::pick("data/teaching.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where)
speaking <- ezpickr::pick("data/speaking.xlsx") %>%
dplyr::arrange(desc(when))
library(tidyverse)
speaking <- ezpickr::pick("data/speaking.xlsx") %>%
dplyr::arrange(desc(when))
speaking <- ezpickr::pick("data/speaking.xlsx") %>%
dplyr::arrange(desc(when))
speaking %>%
filter(type="Conference")
speaking <- ezpickr::pick("data/speaking.xlsx") %>%
dplyr::arrange(desc(when))
speaking %>%
filter(type=="Conference")
vitae::detailed_entries(what, when, with, where)
speaking <- ezpickr::pick("data/speaking.xlsx") %>%
dplyr::arrange(desc(when))
speaking <- ezpickr::pick("data/speaking.xlsx") %>%
dplyr::arrange(desc(when))
speaking %>%
filter(type=="Conference") %>%
vitae::detailed_entries(what, when, with, where)
speaking %>%
filter(type=="Seminar") %>%
vitae::detailed_entries(what, when, with, where)
ezpickr::pick("data/consultancy.xlsx") %>%
dplyr::arrange(desc(when))
ezpickr::pick("data/teaching.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where)
library(tidyverse)
ezpickr::pick("data/consultancy.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, where, when, with, why)
ezpickr::pick("data/teaching.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where)
ezpickr::pick("data/consultancy.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/consultancy.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
create.dir("bib/newbib")
new.dir("bib/newbib")
library(bookdown)
rorcid::orcid_peer_reviews("0000-0001-9500-6592")
rorcid::orcid_peer_reviews("0000-0001-9500-6592", summary=TRUE)
rorcid::orcid_peer_reviews("0000-0001-9500-6592", 75665, summary=TRUE)
rorcid::orcid_peer_reviews("0000-0001-9500-6592", put_code="220419")
rorcid::orcid_peer_reviews("0000-0001-9500-6592")
orcid_peer_reviews(orcid = "0000-0001-7678-8656")
rorcid::orcid_peer_reviews("0000-0001-9500-6592")res$`0000-0001-9500-6592`
names(res$`00000-0001-9500-6592`)
res$`0000-0001-9500-6592`$`group`
res <- rorcid::orcid_peer_reviews("0000-0001-9500-6592")
res$`0000-0001-9500-6592`
names(res$`00000-0001-9500-6592`)
res$`0000-0001-9500-6592`$`group`
library(tidyverse)
library(RefManageR)
`%ni%` = Negate(`%in%`)
options(encoding = "UTF-8")
pubs <- RefManageR::ReadGS(scholar.id="5-qU7lkAAAAJ", check.entries=FALSE) %>%
as_tibble()
pubs
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
for (i in 1:nrow(pubs)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
view(pubs)
pubs_df <- RefManageR::ReadGS(scholar.id="5-qU7lkAAAAJ", check.entries=FALSE) %>%
as_tibble()
# Get full authors list for each publication - by default scholar truncates long author lists,
# can take some time but necessary to avoid 429 errors
authors_full = tibble(authors = character())
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
pubs
pubs %>%
filter(institution =="bioRxiv") %>%
mutate(journal=institution) %>%
mutate(bibtype="Article") %>%
mutate(type=NA) %>%
RefManageR::as.BibEntry() %>%
RefManageR::WriteBib(file="bib/new_bib/working_paper.bib", biblatex=TRUE)
pubs_df
scholar::get_publications("5-qU7lkAAAAJ")
pub_df <- scholar::get_publications("5-qU7lkAAAAJ")
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
pub_df
for (i in 1:nrow(pubs_df)) {
pub_full_ch = scholar::get_complete_authors("5-qU7lkAAAAJ", pubid = pubs_df$pubid[i], delay=0.6)
authors_full[i, ] <- pub_full_ch
Sys.sleep(1)
}
\begin{cvskills}
ezpickr::pick("data/consultancy.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
library(tidyverse)
ezpickr::pick("data/consultancy.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/consultancy.xlsx") %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/consultancy.xlsx") %>%
tidyr::fill(-why) %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/consultancy.xlsx") %>%
tidyr::fill(-why) %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
ezpickr::pick("data/consultancy.xlsx") %>%
tidyr::fill(-why) %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
library(tidyverse)
ezpickr::pick("data/consultancy.xlsx") %>%
tidyr::fill(-why) %>%
dplyr::arrange(desc(when)) %>%
vitae::detailed_entries(what, when, with, where, why)
